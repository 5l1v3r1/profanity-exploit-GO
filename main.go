package main

import (
	"log"
	"os"
	"strconv"
	"sync"
	"time"
)

func save(file_, text_ string) {
	ti := time.Now()
	file, err := os.OpenFile(file_, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return
	}
	defer file.Close()

	file.WriteString(ti.String() + ":" + text_ + "\n")
}

func run(ws, we uint32) {
	crackTarget0 := []byte{0x02, 0x38, 0xe6, 0xf2, 0xc5, 0xab, 0x90, 0xd6, 0x3c, 0x1a, 0xa1, 0x1f, 0x61, 0x03, 0xc4, 0xb5, 0x24, 0xca, 0xcf, 0xac, 0x72, 0x5c, 0x67, 0x3a, 0x2b, 0xf1, 0x2b, 0x98, 0x96, 0x97, 0x7b, 0x73, 0xc5}
	crackTarget1 := []byte{0x02, 0xd0, 0x98, 0x1a, 0x01, 0xa3, 0x80, 0x04, 0x98, 0x0b, 0xeb, 0x03, 0x91, 0x18, 0x0b, 0x36, 0x28, 0xd0, 0xc5, 0x39, 0xf0, 0x2f, 0xfc, 0xea, 0x47, 0x04, 0xdf, 0xa9, 0x73, 0xf2, 0x11, 0xc2, 0x64}
	crackTarget2 := []byte{0x02, 0x51, 0x89, 0xdd, 0xaf, 0x4f, 0x24, 0x55, 0xad, 0x3e, 0x80, 0xe2, 0x5f, 0x87, 0x0b, 0x73, 0x5c, 0xdf, 0x20, 0xb2, 0xf1, 0x3c, 0xcc, 0x42, 0x96, 0x50, 0x56, 0xa2, 0x23, 0x88, 0x04, 0x50, 0x71}

	log.Println(time.Now())
	print(ws, we)
	rM := BuildPkMapRangeCon(ws, we)
	log.Println("Create Hash Done", ws, we)
	var wg sync.WaitGroup
	for i := 1; i < 0xFFFFFFFF; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			if i%1000000 == 0 {
				log.Println("progress seq: ", i)
				save("status.txt", "progress seq: "+strconv.FormatUint(uint64(i), 10)+" range:"+strconv.FormatUint(uint64(ws), 10)+"-"+strconv.FormatUint(uint64(we), 10))
			}
			dpk0 := SubPk(crackTarget0, GenDiffInOrder(uint64(i)))
			dpk1 := SubPk(crackTarget1, GenDiffInOrder(uint64(i)))
			dpk2 := SubPk(crackTarget2, GenDiffInOrder(uint64(i)))

			if v, ok := rM.Get(Bytes2String(dpk0[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk1[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk2[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
		}(i)
	}
	wg.Wait()
	log.Println("done DIP", ws, we, time.Now())
}

func main() {
	// 03edd607617f68dd3d70813d62b33f19889960330cf7bbcfa5810f4e6462f2cb1d
	run(0x0, 0xFFFFFFFF)
	// run(0x0, 0x20000000)
	// run(0x20000000, 0x40000000)
	// run(0x40000000, 0x60000000)
	// run(0x60000000, 0x80000000)
	// run(0x80000000, 0xA0000000)
	// run(0xA0000000, 0xC0000000)
	// run(0xC0000000, 0xE0000000)
	// run(0xE0000000, 0xFFFFFFFF)
}

package main

import (
	"log"
	"os"
	"strconv"
	"sync"
	"time"
)

func save(file_, text_ string) {
	ti := time.Now()
	file, err := os.OpenFile(file_, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return
	}
	defer file.Close()

	file.WriteString(ti.String() + ":" + text_ + "\n")
}

func run(ws, we uint32) {
	// 03edd607617f68dd3d70813d62b33f19889960330cf7bbcfa5810f4e6462f2cb1d
	crackTarget0 := []byte{0x03, 0xa8, 0xa4, 0x46, 0xf0, 0xb2, 0xeb, 0x1e, 0x11, 0xb4, 0x7f, 0x85, 0x00, 0xe0, 0xe8, 0x43, 0x10, 0x51, 0x1d, 0x6e, 0x7a, 0xa1, 0xbe, 0xb5, 0x2a, 0x15, 0x03, 0x79, 0x60, 0x21, 0x52, 0xfd, 0xf7}
	crackTarget1 := []byte{0x02, 0x9e, 0xf4, 0x8f, 0xbd, 0x1e, 0x8f, 0x6c, 0xa6, 0xc5, 0x8b, 0xb2, 0xeb, 0x9d, 0xac, 0x6e, 0x66, 0x1d, 0x77, 0x4b, 0x10, 0x7e, 0xfb, 0xf0, 0x6f, 0x8e, 0x64, 0xd6, 0xd7, 0x62, 0x13, 0xc3, 0x27}
	crackTarget2 := []byte{0x03, 0xf3, 0x05, 0x83, 0xc3, 0x56, 0x1a, 0x19, 0x46, 0xdb, 0x59, 0x4f, 0xe7, 0xd9, 0x2b, 0xca, 0x19, 0xab, 0x99, 0x89, 0x6c, 0xd0, 0x66, 0x32, 0x09, 0xb7, 0x7d, 0x86, 0x0e, 0x73, 0xb0, 0x33, 0xf4}
	crackTarget3 := []byte{0x03, 0x80, 0x00, 0x26, 0x70, 0x3c, 0xd1, 0xeb, 0x1f, 0x9f, 0xd3, 0x55, 0xa8, 0x38, 0x88, 0xdd, 0x49, 0xfc, 0x6e, 0xda, 0x89, 0x73, 0xef, 0xa3, 0xbe, 0xf6, 0x60, 0x60, 0xe2, 0x25, 0xff, 0x12, 0x80}
	crackTarget4 := []byte{0x03, 0xa8, 0xf5, 0x35, 0x37, 0x34, 0xe5, 0xd8, 0x81, 0x78, 0x12, 0xe3, 0xce, 0x37, 0xf3, 0x05, 0xed, 0xa1, 0x39, 0x1e, 0x98, 0x86, 0x6a, 0x4b, 0x7f, 0x8a, 0x19, 0xe5, 0xd8, 0x6e, 0x05, 0x5c, 0x5c}
	crackTarget5 := []byte{0x03, 0xb9, 0x53, 0x47, 0xa5, 0x3f, 0x98, 0x42, 0xb1, 0xaf, 0x15, 0xea, 0x22, 0xcb, 0x18, 0x98, 0xd9, 0xa3, 0x33, 0x2c, 0x51, 0x09, 0xc1, 0x72, 0xb8, 0x06, 0x47, 0x45, 0x38, 0x41, 0x5f, 0xa4, 0x96}
	crackTarget6 := []byte{0x03, 0xac, 0x31, 0x16, 0x3f, 0x75, 0xd7, 0x35, 0x46, 0xa3, 0xa6, 0x4e, 0x84, 0xc7, 0x3d, 0x5b, 0x5e, 0x88, 0x1a, 0xda, 0x16, 0x14, 0x5e, 0x70, 0x57, 0xc7, 0xd5, 0x57, 0x22, 0x62, 0x84, 0xad, 0xa8}
	crackTarget7 := []byte{0x03, 0xd5, 0x0b, 0xa3, 0xe1, 0x91, 0xba, 0x51, 0x68, 0xc1, 0x23, 0x24, 0xef, 0x0e, 0x7a, 0x6e, 0x99, 0xea, 0xf3, 0x3f, 0xc0, 0x94, 0x4b, 0xf9, 0xcd, 0xcf, 0xae, 0x48, 0xd9, 0x57, 0x6d, 0xeb, 0xc6}
	crackTarget8 := []byte{0x03, 0xf7, 0x63, 0x28, 0xea, 0x37, 0xce, 0x4d, 0x5b, 0xea, 0xca, 0x47, 0xd3, 0x27, 0x99, 0xca, 0x81, 0xbe, 0x0b, 0xa1, 0x6f, 0xbd, 0x17, 0xf8, 0x45, 0x87, 0xf3, 0x5c, 0x91, 0x9f, 0xae, 0x03, 0xb0}
	crackTarget9 := []byte{0x02, 0x70, 0xce, 0x45, 0x43, 0xa7, 0xfd, 0x57, 0x6a, 0xc3, 0x8b, 0x57, 0xc6, 0x87, 0x8d, 0x17, 0x5e, 0x0b, 0xcc, 0xfb, 0xbd, 0x3a, 0xbe, 0x5c, 0x62, 0xfc, 0x63, 0x55, 0x28, 0x35, 0x6d, 0x5f, 0x19}
	crackTarget10 := []byte{0x03, 0xd3, 0x8e, 0xe4, 0x50, 0x22, 0x47, 0x36, 0xc0, 0xd8, 0x49, 0x13, 0xbe, 0xc3, 0xec, 0x9b, 0x0b, 0xd2, 0x0b, 0x9e, 0x1f, 0xe2, 0x49, 0x1f, 0xb6, 0x78, 0x0e, 0x78, 0x42, 0xad, 0xd8, 0x34, 0xf2}
	crackTarget11 := []byte{0x03, 0x0b, 0x68, 0x46, 0x82, 0x46, 0x76, 0xc6, 0xc6, 0x70, 0x4c, 0xde, 0x79, 0x26, 0x9a, 0x8d, 0xfb, 0xb6, 0x86, 0x25, 0x99, 0x13, 0x79, 0x33, 0x39, 0x25, 0x17, 0x47, 0xec, 0x25, 0xff, 0xe2, 0x23}
	crackTarget12 := []byte{0x03, 0xaa, 0xc2, 0xb0, 0x2a, 0x58, 0x09, 0xe0, 0xfc, 0x38, 0x95, 0x11, 0xb6, 0x36, 0x74, 0x29, 0x92, 0x41, 0xcd, 0xf0, 0x03, 0x0e, 0xee, 0x42, 0xe2, 0x82, 0xc5, 0xed, 0xc8, 0x59, 0x2d, 0x66, 0x96}
	crackTarget13 := []byte{0x02, 0xc6, 0x52, 0xcb, 0xc0, 0x9f, 0x35, 0x67, 0xc4, 0x12, 0x8c, 0x86, 0xa7, 0xce, 0x5c, 0x23, 0x94, 0x32, 0xb2, 0xc7, 0xb7, 0xd6, 0xa7, 0x46, 0xdc, 0xb8, 0xb3, 0x1c, 0xd1, 0x2f, 0xa1, 0x16, 0xcb}
	crackTarget14 := []byte{0x03, 0x82, 0x69, 0x1b, 0xb2, 0x7c, 0x07, 0xd5, 0xf9, 0x14, 0x40, 0x83, 0x0b, 0xf7, 0x70, 0x95, 0xa7, 0x97, 0x70, 0x4c, 0x74, 0x4c, 0xf0, 0xad, 0xf7, 0xff, 0x16, 0x0f, 0x93, 0x0c, 0x48, 0xa4, 0x14}
	crackTarget15 := []byte{0x02, 0x9a, 0x4e, 0x19, 0x65, 0xb3, 0x07, 0x04, 0x7b, 0x29, 0xbc, 0xe3, 0xc2, 0x97, 0xa4, 0x2d, 0x6a, 0x10, 0xff, 0x03, 0xd7, 0x2e, 0x3f, 0xd6, 0xf9, 0x0a, 0x35, 0xf1, 0x73, 0xdb, 0xb6, 0xbe, 0x39}
	crackTarget16 := []byte{0x02, 0x3b, 0x27, 0x06, 0xfd, 0x39, 0x66, 0xb2, 0x7d, 0xf3, 0x60, 0xc4, 0x1b, 0x89, 0x71, 0x43, 0x1e, 0xf5, 0xac, 0x4c, 0x8f, 0xe7, 0xf9, 0xd7, 0x7d, 0x1a, 0x42, 0xa7, 0x33, 0xcf, 0x02, 0xae, 0x59}
	crackTarget17 := []byte{0x02, 0x52, 0x20, 0xbb, 0x09, 0xfa, 0xf8, 0x27, 0xc4, 0x43, 0xdc, 0xbe, 0x8c, 0x86, 0x42, 0x36, 0xad, 0xb1, 0x48, 0xdc, 0x48, 0xae, 0x3e, 0xd4, 0xeb, 0x4d, 0x1f, 0x0c, 0x94, 0x5a, 0xbf, 0x05, 0x23}
	crackTarget18 := []byte{0x02, 0x20, 0x4c, 0x7f, 0xa5, 0x96, 0x6d, 0x8b, 0xf1, 0xc6, 0xcd, 0x3d, 0x5d, 0x67, 0x9e, 0xb6, 0x04, 0xc4, 0x59, 0x36, 0xc8, 0x0a, 0x83, 0x9f, 0xa5, 0x10, 0x69, 0x37, 0x3d, 0x55, 0x63, 0xd9, 0xcb}
	crackTarget19 := []byte{0x03, 0xa5, 0x9c, 0xf4, 0xaa, 0x80, 0xc0, 0xe8, 0xcf, 0xff, 0xa6, 0x5f, 0x1f, 0xab, 0x1a, 0x09, 0x54, 0x16, 0x5d, 0xee, 0x75, 0x9b, 0xe9, 0x55, 0xb2, 0x8e, 0x46, 0x5c, 0x20, 0x75, 0x79, 0x05, 0x29}
	crackTarget20 := []byte{0x02, 0x38, 0x0a, 0xbf, 0x5d, 0xb6, 0xae, 0x43, 0x27, 0x5e, 0x41, 0x19, 0x51, 0x04, 0x44, 0x7f, 0xe6, 0x5d, 0x8c, 0x4a, 0x1e, 0x8e, 0x72, 0x52, 0x07, 0x8f, 0xde, 0x8f, 0x70, 0xa3, 0xcc, 0xbf, 0x7d}
	crackTarget21 := []byte{0x02, 0x35, 0x9b, 0xf7, 0x16, 0x8a, 0x0d, 0x9f, 0xcb, 0xa4, 0x14, 0xd6, 0x38, 0x4b, 0x15, 0xe8, 0x8b, 0x16, 0x0c, 0x3d, 0x1d, 0x7c, 0x73, 0x23, 0x10, 0x1b, 0x7e, 0x8f, 0x07, 0x4d, 0xf0, 0x00, 0xd6}
	crackTarget22 := []byte{0x02, 0xda, 0x37, 0xab, 0x8e, 0xd3, 0xad, 0x20, 0x2f, 0x73, 0x05, 0x68, 0xe0, 0x39, 0xb1, 0x42, 0xd5, 0x2f, 0x6e, 0x13, 0x8c, 0x90, 0xa9, 0x24, 0x71, 0x0a, 0x27, 0x44, 0x22, 0xb4, 0x2d, 0xc1, 0xf5}
	crackTarget23 := []byte{0x03, 0xc6, 0xe3, 0x99, 0xe1, 0x4a, 0x66, 0xe1, 0xfa, 0xee, 0x2f, 0xb6, 0x10, 0x0f, 0xad, 0xe9, 0xb4, 0x91, 0xdc, 0x43, 0x06, 0xf7, 0x6f, 0x7a, 0x38, 0xc1, 0x93, 0x1d, 0x63, 0x73, 0x49, 0xc1, 0x75}

	log.Println(time.Now())
	print(ws, we)
	rM := BuildPkMapRangeCon(ws, we)
	log.Println("Create Hash Done", ws, we)
	var wg sync.WaitGroup
	for i := 1; i < 0xFFFFFFF; i++ {
		wg.Add(1)
		go func(i int) {
			defer wg.Done()
			if i%1000000 == 0 {
				log.Println("progress seq: ", i)
				save("status.txt", "progress seq: "+strconv.FormatUint(uint64(i), 10)+" range:"+strconv.FormatUint(uint64(ws), 10)+"-"+strconv.FormatUint(uint64(we), 10))
			}

			dpk0 := SubPk(crackTarget0, GenDiffInOrder(uint64(i)))
			dpk1 := SubPk(crackTarget1, GenDiffInOrder(uint64(i)))
			dpk2 := SubPk(crackTarget2, GenDiffInOrder(uint64(i)))
			dpk3 := SubPk(crackTarget3, GenDiffInOrder(uint64(i)))
			dpk4 := SubPk(crackTarget4, GenDiffInOrder(uint64(i)))
			dpk5 := SubPk(crackTarget5, GenDiffInOrder(uint64(i)))
			dpk6 := SubPk(crackTarget6, GenDiffInOrder(uint64(i)))
			dpk7 := SubPk(crackTarget7, GenDiffInOrder(uint64(i)))
			dpk8 := SubPk(crackTarget8, GenDiffInOrder(uint64(i)))
			dpk9 := SubPk(crackTarget9, GenDiffInOrder(uint64(i)))
			dpk10 := SubPk(crackTarget10, GenDiffInOrder(uint64(i)))
			dpk11 := SubPk(crackTarget11, GenDiffInOrder(uint64(i)))
			dpk12 := SubPk(crackTarget12, GenDiffInOrder(uint64(i)))
			dpk13 := SubPk(crackTarget13, GenDiffInOrder(uint64(i)))
			dpk14 := SubPk(crackTarget14, GenDiffInOrder(uint64(i)))
			dpk15 := SubPk(crackTarget15, GenDiffInOrder(uint64(i)))
			dpk16 := SubPk(crackTarget16, GenDiffInOrder(uint64(i)))
			dpk17 := SubPk(crackTarget17, GenDiffInOrder(uint64(i)))
			dpk18 := SubPk(crackTarget18, GenDiffInOrder(uint64(i)))
			dpk19 := SubPk(crackTarget19, GenDiffInOrder(uint64(i)))
			dpk20 := SubPk(crackTarget20, GenDiffInOrder(uint64(i)))
			dpk21 := SubPk(crackTarget21, GenDiffInOrder(uint64(i)))
			dpk22 := SubPk(crackTarget22, GenDiffInOrder(uint64(i)))
			dpk23 := SubPk(crackTarget23, GenDiffInOrder(uint64(i)))

			if v, ok := rM.Get(Bytes2String(dpk0[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk1[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk2[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk3[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk4[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk5[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk6[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk7[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk8[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk9[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk10[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk11[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk12[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk13[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk14[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk15[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk16[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk17[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk18[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk19[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk20[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk21[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk22[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}
			if v, ok := rM.Get(Bytes2String(dpk23[:10])); ok {
				log.Println("Successfully found private key components:", v, i)
				save("found.txt", "Successfully found private key components: v:"+strconv.FormatUint(uint64(v), 10)+" i:"+strconv.FormatUint(uint64(i), 10))
			}

		}(i)
	}
	wg.Wait()
	log.Println("done DIP", ws, we, time.Now())
}

func main() {
	// 03edd607617f68dd3d70813d62b33f19889960330cf7bbcfa5810f4e6462f2cb1d
	// 1.8 Tb ---------------------
	run(0x0, 0xFFFFFFFF)

	// 256Gb ---------------------
	// run(0x0, 0x20000000)
	// run(0x20000000, 0x40000000)
	// run(0x40000000, 0x60000000)
	// run(0x60000000, 0x80000000)
	// run(0x80000000, 0xa0000000)
	// run(0xa0000000, 0xc0000000)
	// run(0xc0000000, 0xe0000000)
	// run(0xe0000000, 0xffffffff)
	// ----------------------------

	// 128 Gb
	// run(0X0, 0X13B13B10)
	// run(0X13B13B10, 0X27627620)
	// run(0X27627620, 0X3B13B130)
	// run(0X3B13B130, 0X4EC4EC40)
	// run(0X4EC4EC40, 0X62762750)
	// run(0X62762750, 0X76276260)
	// run(0X76276260, 0X89D89D70)
	// run(0X89D89D70, 0X9D89D880)
	// run(0X9D89D880, 0XB13B1390)
	// run(0XB13B1390, 0XC4EC4EA0)
	// run(0XC4EC4EA0, 0XD89D89B0)
	// run(0XD89D89B0, 0XEC4EC4C0)
	// run(0XEC4EC4C0, 0XFFFFFFFF)
	// ----------------------------

	// 64 GB
	// run(0X0, 0X9D89D88)
	// run(0X9D89D88, 0X13B13B10)
	// run(0X13B13B10, 0X1D89D898)
	// run(0X1D89D898, 0X27627620)
	// run(0X27627620, 0X313B13A8)
	// run(0X313B13A8, 0X3B13B130)
	// run(0X3B13B130, 0X44EC4EB8)
	// run(0X44EC4EB8, 0X4EC4EC40)
	// run(0X4EC4EC40, 0X589D89C8)
	// run(0X589D89C8, 0X62762750)
	// run(0X62762750, 0X6C4EC4D8)
	// run(0X6C4EC4D8, 0X76276260)
	// run(0X76276260, 0X7FFFFFE8)
	// run(0X7FFFFFE8, 0X89D89D70)
	// run(0X89D89D70, 0X93B13AF8)
	// run(0X93B13AF8, 0X9D89D880)
	// run(0X9D89D880, 0XA7627608)
	// run(0XA7627608, 0XB13B1390)
	// run(0XB13B1390, 0XBB13B118)
	// run(0XBB13B118, 0XC4EC4EA0)
	// run(0XC4EC4EA0, 0XCEC4EC28)
	// run(0XCEC4EC28, 0XD89D89B0)
	// run(0XD89D89B0, 0XE2762738)
	// run(0XE2762738, 0XEC4EC4C0)
	// run(0XEC4EC4C0, 0XF6276248)
	// run(0XF6276248, 0XFFFFFFFF)
	//----------------------------

	// 32 GB
	// run(0x0, 0x4000000)
	// run(0x4000000, 0x8000000)
	// run(0x8000000, 0xc000000)
	// run(0xc000000, 0x10000000)
	// run(0x10000000, 0x14000000)
	// run(0x14000000, 0x18000000)
	// run(0x18000000, 0x1c000000)
	// run(0x1c000000, 0x20000000)
	// run(0x20000000, 0x24000000)
	// run(0x24000000, 0x28000000)
	// run(0x28000000, 0x2c000000)
	// run(0x2c000000, 0x30000000)
	// run(0x30000000, 0x34000000)
	// run(0x34000000, 0x38000000)
	// run(0x38000000, 0x3c000000)
	// run(0x3c000000, 0x40000000)
	// run(0x40000000, 0x44000000)
	// run(0x44000000, 0x48000000)
	// run(0x48000000, 0x4c000000)
	// run(0x4c000000, 0x50000000)
	// run(0x50000000, 0x54000000)
	// run(0x54000000, 0x58000000)
	// run(0x58000000, 0x5c000000)
	// run(0x5c000000, 0x60000000)
	// run(0x60000000, 0x64000000)
	// run(0x64000000, 0x68000000)
	// run(0x68000000, 0x6c000000)
	// run(0x6c000000, 0x70000000)
	// run(0x70000000, 0x74000000)
	// run(0x74000000, 0x78000000)
	// run(0x78000000, 0x7c000000)
	// run(0x7c000000, 0x80000000)
	// run(0x80000000, 0x84000000)
	// run(0x84000000, 0x88000000)
	// run(0x88000000, 0x8c000000)
	// run(0x8c000000, 0x90000000)
	// run(0x90000000, 0x94000000)
	// run(0x94000000, 0x98000000)
	// run(0x98000000, 0x9c000000)
	// run(0x9c000000, 0xa0000000)
	// run(0xa0000000, 0xa4000000)
	// run(0xa4000000, 0xa8000000)
	// run(0xa8000000, 0xac000000)
	// run(0xac000000, 0xb0000000)
	// run(0xb0000000, 0xb4000000)
	// run(0xb4000000, 0xb8000000)
	// run(0xb8000000, 0xbc000000)
	// run(0xbc000000, 0xc0000000)
	// run(0xc0000000, 0xc4000000)
	// run(0xc4000000, 0xc8000000)
	// run(0xc8000000, 0xcc000000)
	// run(0xcc000000, 0xd0000000)
	// run(0xd0000000, 0xd4000000)
	// run(0xd4000000, 0xd8000000)
	// run(0xd8000000, 0xdc000000)
	// run(0xdc000000, 0xe0000000)
	// run(0xe0000000, 0xe4000000)
	// run(0xe4000000, 0xe8000000)
	// run(0xe8000000, 0xec000000)
	// run(0xec000000, 0xf0000000)
	// run(0xf0000000, 0xf4000000)
	// run(0xf4000000, 0xf8000000)
	// run(0xf8000000, 0xfc000000)
	// run(0xfc000000, 0xffffffff)
}

package main

import (
	"encoding/binary"
	"encoding/hex"
	"fmt"

	"github.com/bszcz/mt19937_64"

	"github.com/ethereum/go-ethereum/crypto/secp256k1"
)

var curve = secp256k1.S256()

func Seed2Uint256(seed uint32) []byte {
	r := mt19937_64.New()
	r.Seed(int64(seed))
	b := make([]byte, 32)
	binary.BigEndian.PutUint64(b[24:], r.Uint64())
	binary.BigEndian.PutUint64(b[16:], r.Uint64())
	binary.BigEndian.PutUint64(b[8:], r.Uint64())
	binary.BigEndian.PutUint64(b[0:], r.Uint64())
	return b[:]
}

func Pk2Compressed(r []byte) []byte {
	x, y := curve.ScalarBaseMult(r)
	cpk := secp256k1.CompressPubkey(x, y)
	return cpk
}

func SubPk(pubK []byte, privKDiff []byte) []byte {
	dx, dy := curve.ScalarBaseMult(privKDiff)
	fft := hex.EncodeToString(secp256k1.CompressPubkey(dx, dy))
	fmt.Print("FTT:", fft, "\n")
	uncompX, uncompY := secp256k1.DecompressPubkey(pubK)
	diffX, diffY := curve.Add(uncompX, uncompY, dx, dy.Neg(dy))
	pp := secp256k1.CompressPubkey(diffX, diffY)
	fmt.Print("DTT dx, dy:", dx, dy, "\n")
	fmt.Print("source PUB uncompX, uncompY:", uncompX, uncompY, "\n")
	fft1 := hex.EncodeToString(secp256k1.CompressPubkey(diffX, diffY))
	fmt.Print("FTT1:", fft1, "\n")
	return pp
}

func GenDiffInOrder(diffSrc uint64) []byte {
	head := diffSrc & 0x3FFFFF
	tail := diffSrc & 0xFFFFFFc00000
	fmt.Print("tail1:", tail, "\n")
	tail = tail >> 22
	fmt.Print("tail2:", tail, "\n")
	b := make([]byte, 32)
	binary.BigEndian.PutUint64(b[24:], tail)
	binary.BigEndian.PutUint64(b[16:], 0)
	binary.BigEndian.PutUint64(b[8:], 0)
	binary.BigEndian.PutUint64(b[0:], head)
	return b[:]
}

func main() {
	// crackTarget0 := []byte{0x02, 0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B, 0x07, 0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8, 0x17, 0x98}
	dtt := GenDiffInOrder(uint64(0xFEE88F4A))
	s := hex.EncodeToString(dtt)
	fmt.Print("GenDiffInOrder:", s, "\n")

	// dpk0 := SubPk(crackTarget0, dtt)
	// fmt.Print("dpk0:", dpk0, "\n")
	// dpk0 := Seed2Uint256(3345717797)
	// s := hex.EncodeToString(dpk0)
	// fmt.Print("dpk0:", s, "\n")

}

package main

import (
	"log"
	"os"
	"sync"
	"time"
	"unsafe"

	"github.com/alphadose/haxmap"
)

func save(file_, text_ string) {
	ti := time.Now()
	file, err := os.OpenFile(file_, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		return
	}
	defer file.Close()

	file.WriteString(ti.String() + ":" + text_ + "\n")
}

func Bytes2String(b []byte) string {
	return *(*string)(unsafe.Pointer(&b))
}

func String2Bytes(s string) []byte {
	x := (*[2]uintptr)(unsafe.Pointer(&s))
	h := [3]uintptr{x[0], x[1], x[1]}
	return *(*[]byte)(unsafe.Pointer(&h))
}

func BuildPkMapRangeCon(s, r uint32) *haxmap.Map[string, uint32] {
	resp := haxmap.New[string, uint32]()
	var wg sync.WaitGroup
	for i := s; i < r; i++ {
		wg.Add(1)
		go func(i uint32) {
			defer wg.Done()
			if i%1000000 == 0 {
				log.Println("Progress: ", i)
			}
			pk := Seed2Uint256(i)
			cpk := Pk2Compressed(pk)
			resp.Set(Bytes2String(cpk[:10]), i)
		}(i)
	}
	wg.Wait()
	return resp
}
